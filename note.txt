---------------------------------------------------------------------------------------------------------------------------------------------------

Introduction to Jackson Annotations :-

    1) Jackson is a popular Java library for :-
        - Serializing Java objects into JSON
        - Deserializing JSON into Java objects

    2) By default, Jackson uses JavaBean conventions :-
        - Properties are mapped to JSON fields using getters/setters.
        - Field names are directly used as JSON keys (unless configured otherwise).

    3) But in real-world applications :-
        - Field names in JSON may differ from Java field names.
        - Some fields may need to be ignored.
        - Formatting (e.g., dates) might not match default expectations.
        - Polymorphic types (inheritance) may need explicit hints for correct deserialization.

    ðŸ‘‰ This is where Jackson annotations come in :-
        Jackson annotations are metadata placed on classes, fields, methods, or constructors that tell Jackson how to handle (de)serialization.
    ðŸ‘‰ They live in the package :-
        com.fasterxml.jackson.annotation

---------------------------------------------------------------------------------------------------------------------------------------------------

Annotations :-

1)  JacksonAnnotation
2)  JacksonAnnotationsInside
3)  JacksonAnnotationValue
4)  JacksonInject
5)  JsonAlias
6)  JsonAnyGetter
7)  JsonAnySetter
8)  JsonAutoDetect
9)  JsonBackReference
10) JsonClassDescription
11) JsonCreator
12) JsonEnumDefaultValue
13) JsonFilter
14) JsonFormat
15) JsonGetter
16) JsonIdentityInfo
17) JsonIdentityReference
18) JsonIgnore
19) JsonIgnoreProperties
20) JsonIgnoreType
21) JsonInclude
22) JsonIncludeProperties
23) JsonKey
24) JsonManagedReference
25) JsonMerge
26) JsonProperty
27) JsonPropertyDescription
28) JsonPropertyOrder
29) JsonRawValue
30) JsonRootName
31) JsonSetter
32) JsonSubTypes
33) JsonTypeId
34) JsonTypeInfo
35) JsonTypeName
36) JsonUnwrapped
37) JsonValue
38) JsonView

---------------------------------------------------------------------------------------------------------------------------------------------------

@Target({ElementType.ANNOTATION_TYPE, ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER})
@Retention(RetentionPolicy.RUNTIME)
@JacksonAnnotation
public @interface JsonProperty {
    //
}

Note :-
    1) @Target, @Retention, @JacksonAnnotation :-  Meta-Annotations
    2) @Target, @Retention :-  present in 'java.lang.annotation'
    3) @JacksonAnnotation  :-  marker annotation used internally by Jackson.
        - It tells Jacksonâ€™s AnnotationIntrospector (the component that scans annotations) that this is a Jackson-specific annotation.
        - This helps Jackson differentiate between its own annotations and other custom/third-party ones.
        - ðŸ‘‰ Without this, Jackson wouldnâ€™t automatically recognize @JsonProperty as part of its processing pipeline.


1) @Target  :-

    @Documented
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.ANNOTATION_TYPE)
    public @interface Target {
        ElementType[] value();
    }

public enum ElementType {
    TYPE,              // Class, interface (including annotation interface), enum, or record declaration
    FIELD,             // Field declaration (includes enum constants)
    METHOD,            // Method declaration
    PARAMETER,         // Formal parameter declaration
    CONSTRUCTOR,       // Constructor declaration
    LOCAL_VARIABLE,    // Local variable declaration
    ANNOTATION_TYPE,   // Annotation interface declaration (Formerly known as an annotation type.)
    PACKAGE,           // Package declaration
    TYPE_PARAMETER,    // Type parameter declaration
    TYPE_USE,          // Use of a type
    MODULE,            // Module declaration.
    RECORD_COMPONENT;  // Record component
}

1] TYPE :-      Used on Class, interface (including annotation interface), enum, or record declaration

    @Target(ElementType.TYPE)
    @Retention(RetentionPolicy.RUNTIME)
    @interface TypeLevel {}

    - a) On Class :-                        @TypeLevel
                                            public class MyClass {}
    - b) On Interface :-                    @TypeLevel
                                            interface MyInterface {}
    - d) On Enum :-                         @TypeLevel
                                            enum MyEnum {}
    - e) On Record :-                       @TypeLevel
                                            record MyRecord(int id, String name) {
                                                //
                                            }

2] FIELD :-     Used on fields (including enum constants).

    @Target(ElementType.FIELD)
    @Retention(RetentionPolicy.RUNTIME)
    @interface FieldLevel {}

    class User {
        @FieldLevel
        private String name;

        @FieldLevel
        public static final int VERSION = 1;

        enum Status {
            @FieldLevel ACTIVE,
            @FieldLevel INACTIVE
        }
    }


3] METHOD :-        Used on method declarations.

    @Target(ElementType.METHOD)
    @Retention(RetentionPolicy.RUNTIME)
    @interface MethodLevel {}

    class Service {
        @MethodLevel
        public void process() {}
    }


4] PARAMETER :-         Used on method/constructor parameters.

    @Target(ElementType.PARAMETER)
    @Retention(RetentionPolicy.RUNTIME)
    @interface ParamLevel {}

    class UserService {
        public void createUser(@ParamLevel String name, @ParamLevel int age) {}
    }


5] CONSTRUCTOR :-          Used on constructors.

    @Target(ElementType.CONSTRUCTOR)
    @Retention(RetentionPolicy.RUNTIME)
    @interface ConstructorLevel {}

    class Product {
        @ConstructorLevel
        public Product() {}
    }


6] LOCAL_VARIABLE :-        Used on local variables inside methods.

    @Target(ElementType.LOCAL_VARIABLE)
    @Retention(RetentionPolicy.RUNTIME)
    @interface LocalVarLevel {}

    class Calculator {
        public int sum(int a, int b) {
            @LocalVarLevel int result = a + b;
            return result;
        }
    }


7] ANNOTATION_TYPE :-       Used on annotations themselves.

    @Target(ElementType.ANNOTATION_TYPE)
    @Retention(RetentionPolicy.RUNTIME)
    @interface MetaAnnotation {}

    @MetaAnnotation
    @interface CustomAnnotation {}


8] PACKAGE :-       Used on package declarations.
                    Must be placed in package-info.java.

    package-info.java :-

    @PackageLevel
    package com.example.myapp;

    import java.lang.annotation.*;

    @Target(ElementType.PACKAGE)
    @Retention(RetentionPolicy.RUNTIME)
    @interface PackageLevel {}


9] TYPE_PARAMETER :-        Used on generic type parameters.

    @Target(ElementType.TYPE_PARAMETER)
    @Retention(RetentionPolicy.RUNTIME)
    @interface TypeParamLevel {}

    class Box<@TypeParamLevel T> {
        private T value;
    }


10] TYPE_USE :-     Used on any usage of a type (very powerful).

    @Target(ElementType.TYPE_USE)
    @Retention(RetentionPolicy.RUNTIME)
    @interface TypeUseLevel {}

    class Demo {
        @TypeUseLevel String name;                 // field type
        private List<@TypeUseLevel String> items;  // generic type
        public @TypeUseLevel String getName() {    // return type
            return name;
        }
    }


11] MODULE :-       Used on Java 9+ module declarations (module-info.java).

    module-info.java :-

    @ModuleLevel
    module my.module {
        exports com.example;
    }

    import java.lang.annotation.*;

    @Target(ElementType.MODULE)
    @Retention(RetentionPolicy.RUNTIME)
    @interface ModuleLevel {}


12] RECORD_COMPONENT :-         Used on record components (Java 16+).

    @Target(ElementType.RECORD_COMPONENT)
    @Retention(RetentionPolicy.RUNTIME)
    @interface RecordComponentLevel {}

    record Person(@RecordComponentLevel String name,
                  @RecordComponentLevel int age) {}

